func EditPostHandler(w http.ResponseWriter, r *http.Request) {

	if r.URL.Path != "/EditPost" || guest {
		Error.RenderErrorPage(w, 404, "Page Not Found")
		return
	}

	var user Account
	user = GetUserData(w, r)
	fmt.Println("FunctionWorked")

	if r.Method == "POST" {
		var request Request
		if r.Header.Get("Content-Type") == "application/json" {
			err := json.NewDecoder(r.Body).Decode(&request)
			if err != nil {
				// Handle other decoding errors
				http.Error(w, "Failed to decode JSON request", http.StatusBadRequest)
				return
			}
			fmt.Println(request.ID)
			postId := request.ID
			title, content, image, categories := GetPostData(postId)
			fmt.Println(title, content, image, categories)

			numNotifications := GetNumOfNotifications(user.Id)

			var tmpl = template.Must(template.ParseFiles("./Pages/EditPost.html", "./Pages/nav.html"))

			data := EditPostTemplateData{
				Username:         user.Username,
				ProfileImg:       user.ProfileImg,
				PostId:           postId,
				Title:            title,
				Content:          content,
				PostImage:            image,
				Categories:       categories,
				NumNotifications: numNotifications,
			}

			err = tmpl.Execute(w, data)
			if err != nil {
				Error.RenderErrorPage(w, http.StatusInternalServerError, "Error executing template")
				return
			}
		} else {
		
			// Parse the form data
			err = r.ParseMultipartForm(20 << 20) //20 MB maximum file size
			if err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			// Get the uploaded image file
			file, handler, err := r.FormFile("file")
			if err != nil && err != http.ErrMissingFile {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}

			var imgPath string
			if file != nil {
				defer file.Close()
				// Save the image file
				imgPath = "Posts/" + handler.Filename
				distinationFile, err := os.OpenFile(imgPath, os.O_WRONLY|os.O_CREATE, 0666)
				if err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
				defer distinationFile.Close()
				io.Copy(distinationFile, file)
			} else {
				imgPath = ""
			}

			// Get the Title and Content value
			title := r.FormValue("Title")
			content := r.FormValue("Content")

			// Get the selected checkboxes
			checkboxes := r.Form["checkbox"]

			postID := r.URL.Query().Get("Id")
			Id, err := strconv.Atoi(postID)
			UpdatePost(Id, title, content, imgPath, strings.Join(checkboxes, ","))
			http.Redirect(w, r, "/Profile", http.StatusFound)
		}
	}else {
		Error.RenderErrorPage(w, http.StatusMethodNotAllowed, "Method Not Allowed")
	}
}


func GetPostData(ID string) (string, string, string, []string) {
	var title, content, image, category string
	Id, err := strconv.Atoi(ID)
	if err != nil {
		log.Fatal("Invalid post ID:", err)
	}

	row := Postsdb.QueryRow("SELECT title, content, image, category FROM posts WHERE post_id = ?", Id)
	err = row.Scan(&title, &content, &image, &category)
	if err != nil {
		log.Fatal("Failed to query database:", err)
	}

	categories := strings.Split(category, ",")

	return title, content, image, categories
}

func UpdatePost(postID int, title string, content string, image string, category string) {
	query := `
		UPDATE posts
		SET title = ?, content = ?, image = ?, category = ?
		WHERE post_id = ?
	`
	_, err := Postsdb.Exec(query, title, content, image, category, postID)
	if err != nil {
		log.Fatal(err)
	}
}